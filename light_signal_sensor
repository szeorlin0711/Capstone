#!/usr/bin/env python3
import cv2
import numpy as np
import os
import time
import rft_hsvrgb as rf
import imutils
import rospy
from std_msgs.msg import String

CALIBRATION_FILE = "multi_color_calibration.npy"
SYNC_FLAG_FILE = "/tmp/tracker_ready.flag"

def wait_for_tracker_ready():
    while not os.path.exists(SYNC_FLAG_FILE):
        print("Waiting for ROS_line_tracker to finish calibration...")
        time.sleep(1)

def save_calibration_data(color_ranges, color_space='HSV'):
    data = {'color_space': color_space, 'ranges': color_ranges}
    np.save(CALIBRATION_FILE, data)

def load_calibration_data():
    try:
        data = np.load(CALIBRATION_FILE, allow_pickle=True).item()
        return data.get('ranges', {}), data.get('color_space', 'HSV')
    except FileNotFoundError:
        return None, None

def process_colors(frame, color_ranges, range_filter='HSV', publisher=None):
    brightness = 50
    saturation = 50
    if color_ranges:
        sample = next(iter(color_ranges.values()))
        brightness = sample.get("brightness", 50)
        saturation = sample.get("saturation", 50)

    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    hsv[..., 1] = cv2.multiply(hsv[..., 1], saturation / 50.0)
    hsv[..., 2] = cv2.multiply(hsv[..., 2], brightness / 50.0)
    hsv = np.clip(hsv, 0, 255).astype(np.uint8)

    frame_to_thresh = hsv if range_filter.upper() == 'HSV' else frame
    output_frame = frame.copy()
    detected_colors = set()

    for color_name, data in color_ranges.items():
        lower, upper = np.array(data["lower"]), np.array(data["upper"])
        mask = cv2.inRange(frame_to_thresh, lower, upper)

        kernel = np.ones((5, 5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        for cnt in contours:
            if cv2.contourArea(cnt) > 500:
                x, y, w, h = cv2.boundingRect(cnt)
                cv2.rectangle(output_frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(output_frame, color_name, (x, y - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                detected_colors.add(color_name)

    if publisher and detected_colors:
        for color in detected_colors:
            publisher.publish(String(data=color))
            rospy.loginfo(f"Published detected color: {color}")

    return output_frame

def main():
    rospy.init_node("color_detector_node")
    color_pub = rospy.Publisher("/detected_color", String, queue_size=10)

    cap = cv2.VideoCapture("/dev/video0")
    if not cap.isOpened():
        print("Error: Cannot open camera.")
        return

    wait_for_tracker_ready()

    color_ranges, saved_color_space = load_calibration_data()
    use_saved = False

    if color_ranges:
        user_input = input("Calibration found. Use saved data? (y/n): ").strip().lower()
        if user_input == 'y':
            use_saved = True
            range_filter = saved_color_space
        else:
            range_filter = input("Choose color space (HSV/BGR): ").strip().upper()
    else:
        range_filter = input("No saved data. Choose color space (HSV/BGR): ").strip().upper()

    if range_filter not in ['HSV', 'BGR']:
        print("Invalid color space selected. Exiting.")
        return

    if not use_saved:
        color_ranges = {}
        for color in ['red', 'green', 'blue', 'yellow']:
            print(f"Calibrating {color}...")
            _ = cap.read()
            track_vals = rf.process_live_feed(cap, preview=True, imut=False, frame_width=640)
            lower = np.array(track_vals[:3])
            upper = np.array(track_vals[3:6])
            brightness, saturation = track_vals[6], track_vals[7]
            color_ranges[color] = {
                "lower": lower,
                "upper": upper,
                "brightness": brightness,
                "saturation": saturation
            }
        save_calibration_data(color_ranges, range_filter)

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        ret, frame = cap.read()
        if not ret:
            break

        processed_frame = process_colors(frame, color_ranges, range_filter, publisher=color_pub)
        cv2.imshow("Multi-Color Detection", imutils.resize(processed_frame, width=720))

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        rate.sleep()

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()





